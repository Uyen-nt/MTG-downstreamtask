# create_icd9_hierarchy.py
import pandas as pd
from pathlib import Path

# === ƒê∆Ø·ªúNG D·∫™N ===
PROJECT_ROOT = Path.cwd()
SOURCE_DX = PROJECT_ROOT / "data" / "ccs_multi_dx_tool_2015.csv"
OUTPUT_CSV = PROJECT_ROOT / "data" / "icd9_hierarchy.csv"

if not SOURCE_DX.exists():
    raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file: {SOURCE_DX}")

print(f"ƒêang t·∫°o file icd9_hierarchy.csv t·ª´: {SOURCE_DX}")

# ==============================
# 1Ô∏è‚É£ ƒê·ªåC FILE G·ªêC
# ==============================
# Th·ª≠ c√°c c√°ch ƒë·ªçc kh√°c nhau ƒë·ªÉ tr√°nh l·ªói "0 c·ªôt"
try:
    df = pd.read_csv(SOURCE_DX, sep="\t", dtype=str, engine="python")
except Exception as e:
    print("‚ùå L·ªói khi ƒë·ªçc b·∫±ng tab, th·ª≠ l·∫°i v·ªõi d·∫•u ph·∫©y (,)")
    df = pd.read_csv(SOURCE_DX, sep=",", dtype=str, engine="python")

# N·∫øu v·∫´n r·ªóng, in th·ª≠ v√†i d√≤ng ƒë·ªÉ ki·ªÉm tra
if df.shape[1] == 0:
    print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c c·ªôt n√†o. In th·ª≠ 5 d√≤ng ƒë·∫ßu:")
    with open(SOURCE_DX, "r", encoding="utf-8", errors="ignore") as f:
        for i in range(5):
            print(f.readline())
    raise ValueError("Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c header. H√£y ki·ªÉm tra ƒë·ªãnh d·∫°ng t·ªáp g·ªëc.")

# ==============================
# 2Ô∏è‚É£ L√ÄM S·∫†CH HEADER
# ==============================
df.columns = [c.strip().replace("'", "") for c in df.columns]

needed_cols = [
    'ICD-9-CM CODE',
    'CCS LVL 1', 'CCS LVL 1 LABEL',
    'CCS LVL 2', 'CCS LVL 2 LABEL',
    'CCS LVL 3', 'CCS LVL 3 LABEL',
    'CCS LVL 4', 'CCS LVL 4 LABEL'
]
cols_in_file = [c for c in needed_cols if c in df.columns]

if len(cols_in_file) == 0:
    raise ValueError(f"Kh√¥ng t√¨m th·∫•y c√°c c·ªôt CCS trong file. C√°c c·ªôt hi·ªán c√≥: {list(df.columns)}")

df = df[cols_in_file]
df.columns = ['ICD9', 'cat1', 'desc1', 'cat2', 'desc2', 'cat3', 'desc3', 'cat4', 'desc4'][:len(cols_in_file)]

# ==============================
# 3Ô∏è‚É£ D·ªåN D·ªÆ LI·ªÜU
# ==============================
for c in df.columns:
    df[c] = df[c].astype(str).str.strip().str.replace("'", "")

df = df[df['ICD9'].notna() & (df['ICD9'].str.strip() != '')]

# ==============================
# 4Ô∏è‚É£ GHI FILE K·∫æT QU·∫¢
# ==============================
OUTPUT_CSV.parent.mkdir(parents=True, exist_ok=True)
df.to_csv(OUTPUT_CSV, index=False)
print(f"‚úÖ ƒê√£ l∆∞u: {OUTPUT_CSV}")
print(f"üîπ T·ªïng s·ªë d√≤ng: {len(df)}")
print(f"üîπ C·ªôt: {list(df.columns)}")
